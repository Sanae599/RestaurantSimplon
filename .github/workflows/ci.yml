name: CI - Tests & Coverage (simple)

on:
  push:
    #branches: [ "main" ]
    branches: [ "main", "develop", "branch_sanae" ]  # ajoute ta branche ici
  pull_request:
    #branches: [ "main" ]
    branches: [ "main", "develop" ]
jobs:
  test:
    runs-on: ubuntu-latest

    # Démarre Postgres pour satisfaire DATABASE_URL (même si tes tests utilisent SQLite via conftest)
    services:
      postgres:
        image: postgres:16
        env:
          DATABASE_URL: postgresql+psycopg2://restau:restau_pwd@localhost:5432/restau_db
          PYTHONUNBUFFERED: 1
          TESTING: "true"                 
          SECRET_KEY: "ci-test-secret"    
          ALGORITHM: "HS256"              
          ACCESS_TOKEN_EXPIRE_MINUTES: "30"
          REFRESH_TOKEN_EXPIRE_DAYS: "7"
          POSTGRES_USER: restau
          POSTGRES_PASSWORD: restau_pwd
          POSTGRES_DB: restau_db
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U restau -d restau_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      # ton app lira cette variable au démarrage
      DATABASE_URL: postgresql+psycopg2://restau:restau_pwd@localhost:5432/restau_db
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # adapte si tu as un requirements-dev.txt
          pip install -r requirements.txt
          # s'assurer que ces paquets existent (sinon ajoute-les à requirements.txt)
          pip install pytest pytest-cov alembic psycopg2-binary

      - name: Alembic upgrade (crée les tables sur Postgres)
        run: |
          # adapte si ton alembic.ini est ailleurs
          alembic upgrade head

      - name: Run tests with coverage (≥ 80%)
        run: |
          pytest -q \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-fail-under=80

      - name: Export OpenAPI (Swagger)
        run: |
          python scripts/export_openapi.py
        env:
          OPENAPI_OUT: openapi.json

      - name: Upload artifacts (coverage + openapi)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage.xml
            openapi.json

  docker:
    needs: [ test ]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
