name: CI - Tests & Coverage (debug)

on:
  push:
    branches: [ "main", "develop", "branch_sanae" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read
  packages: write

#JOB 1 : QUALITÉ (black / isort / flake8 / mypy)
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dev tools
        run: |
          python -m pip install --upgrade pip
          # si tu as requirements-dev.txt, décommente la ligne suivante et ajoute-y black/isort/flake8/mypy
          # pip install -r requirements-dev.txt
          pip install black isort flake8 mypy

      - name: Show versions
        run: |
          black --version
          isort --version
          flake8 --version
          mypy --version

      - name: Black (check format)
        run: black .

      - name: Isort (check imports)
        run: isort .

      - name: Flake8 (lint)
        run: flake8 .

      - name: Mypy (typing)
        run: mypy app

  #JOB 2 : TESTS (ne tourne que si lint est OK)
  test:
    needs: [ lint ]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: restau
          POSTGRES_PASSWORD: restau_pwd
          POSTGRES_DB: restau_db
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U restau -d restau_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      DATABASE_URL: postgresql+psycopg2://restau:restau_pwd@localhost:5432/restau_db
      PYTHONUNBUFFERED: "1"
      TESTING: "true"
      SECRET_KEY: "ci-test-secret"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "7"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install runtime deps
        run: |
          set -xe
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest pytest-cov alembic psycopg2-binary httpx

      - name: Show env & versions
        run: |
          set -x
          python -V
          pip show pytest pytest-cov httpx fastapi starlette sqlmodel alembic psycopg2-binary
          echo "DATABASE_URL=$DATABASE_URL"
          echo "TESTING=$TESTING"
          echo "SECRET_KEY set? $([ -n "$SECRET_KEY" ] && echo yes || echo no)"
          echo "Repo tree:"
          ls -R | sed -n '1,200p'

      - name: Alembic status & upgrade (if present)
        run: |
          set -e
          if [ -f "alembic.ini" ] || [ -f "app/alembic.ini" ]; then
            echo "== Alembic files found, checking status =="
            alembic current || true
            echo "== Upgrading =="
            alembic upgrade head
          else
            echo "No alembic.ini found, skipping migrations."
          fi

      - name: Pytest collect-only (debug)
        run: |
          set -xe
          pytest --version
          echo "=== Collecting tests (no execution) ==="
          pytest --collect-only -q || exit $?

      - name: Run tests with coverage (≥60%)
        run: |
          set -xe
          pytest -vv -s \
            --maxfail=1 \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-fail-under=60

      - name: Export OpenAPI (Swagger)
        run: |
          if [ -f "scripts/export_openapi.py" ]; then
            python scripts/export_openapi.py
          else
            echo "scripts/export_openapi.py missing, skipping."
            echo "{}" > openapi.json
          fi
        env:
          OPENAPI_OUT: openapi.json

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            coverage.xml
            .coverage
            htmlcov/
            .pytest_cache/
            openapi.json
