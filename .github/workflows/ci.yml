name: CI - Tests & Coverage (simple)

on:
  push:
    branches: [ "main", "develop", "branch_sanae" ]
  pull_request:
    branches: [ "main", "develop" ]

# ðŸ‘‡ Autorise le GITHUB_TOKEN Ã  publier des images sur GHCR
permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: restau
          POSTGRES_PASSWORD: restau_pwd
          POSTGRES_DB: restau_db
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U restau -d restau_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      # Variables lues par ton app
      DATABASE_URL: postgresql+psycopg2://restau:restau_pwd@localhost:5432/restau_db
      PYTHONUNBUFFERED: "1"
      TESTING: "true"
      SECRET_KEY: "ta_clef_secrete_super_sÃ©curisee"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "7"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          # deps CI minimales
          pip install pytest pytest-cov alembic psycopg2-binary httpx

      - name: Alembic upgrade
        run: alembic upgrade head

      - name: Run tests with coverage (â‰¥ 60%)
        run: |
          pytest -q \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-fail-under=60

      - name: Export OpenAPI (Swagger)
        run: python scripts/export_openapi.py
        env:
          OPENAPI_OUT: openapi.json

      - name: Upload artifacts (coverage + openapi)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage.xml
            openapi.json

  docker:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ðŸ‘‡ Force le nom d'image en minuscules pour GHCR
      - name: Set image name in lowercase
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
